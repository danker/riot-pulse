"""
Output formatters for different report types
"""

from datetime import datetime

from ..config import AnalysisAspects, ReportConfig, RiotGames


class MarkdownFormatter:
    """Formats reports as markdown files"""

    def create_report(
        self,
        results: dict[RiotGames, dict[AnalysisAspects, str]],
        filename: str,
        config: ReportConfig,
    ) -> None:
        """
        Create a markdown report from analysis results

        Args:
            results: Dictionary containing analysis results by game and aspect
            filename: Output filename
            config: Report configuration used
        """
        now = datetime.now()
        timestamp = now.strftime("%B %d, %Y at %I:%M %p")

        # Process results to handle formatting
        processed_results = {}
        for game, game_results in results.items():
            processed_game_results = {}
            for aspect, content in game_results.items():
                # Replace escaped newlines with actual newlines
                if isinstance(content, str):
                    content = content.replace("\\n", "\n").strip()
                processed_game_results[aspect] = content
            processed_results[game] = processed_game_results

        # Generate report content
        content = self._generate_markdown_content(
            processed_results, timestamp, filename, config
        )

        # Write to file
        with open(filename, "w", encoding="utf-8") as f:
            f.write(content)

    def _generate_markdown_content(
        self,
        results: dict[RiotGames, dict[AnalysisAspects, str]],
        timestamp: str,
        filename: str,
        config: ReportConfig,
    ) -> str:
        """Generate the markdown content for the report"""

        # Header
        content = f"""# Riot Pulse Social Listening Report

**Date:** {timestamp}
**Report:** {filename}
**Timeframe:** {config.timeframe}
**Games Analyzed:** {", ".join([RiotGames.get_display_name(g) for g in config.games])}
**Analysis Aspects:** {", ".join([AnalysisAspects.get_display_name(a) for a in config.aspects])}

---

## Executive Summary

This report provides automated analysis across specified Riot Games titles and analysis aspects using AI-powered social listening.

---

"""

        # Generate sections for each game
        for game in config.games:
            game_name = RiotGames.get_display_name(game)
            game_results = results.get(game, {})

            content += f"## {game_name}\n\n"

            # Add each analysis aspect for this game
            for aspect in config.aspects:
                aspect_name = AnalysisAspects.get_display_name(aspect)
                aspect_content = game_results.get(aspect, "No data available")

                content += f"### {aspect_name}\n\n{aspect_content}\n\n---\n\n"

        # Footer
        content += "*Report generated by Riot Pulse using Perplexity AI*\n"

        return content
